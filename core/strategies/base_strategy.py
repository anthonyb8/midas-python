from abc import ABC, abstractmethod
from typing import Dict, List
from queue import Queue
from ibapi.contract import Contract
from core.base.data import Signal, SignalsManager
from core.base.events import  SignalEvent, MarketDataEvent, OrderEvent

class BaseStrategy(ABC):
    """
    Abstract base class for trading strategies.

    This class provides a template for developing various trading strategies,
    handling market data, generating signals, and managing orders.
    """

    def __init__(self, symbols_map: Dict[str, Contract], event_queue: Queue):
        """
        Initialize the strategy with necessary parameters and components.

        Parameters:
            symbols_map (Dict[str, Contract]): Mapping of symbol strings to Contract objects.
            event_queue (Queue): Event queue for sending events to other parts of the system.
        """
        self.symbols_map = symbols_map
        self._event_queue = event_queue 
        self.signals_manager = SignalsManager()

    @property
    def signals_log(self) -> Dict:
        """
        Get the JSON log of signals generated by this strategy.

        Returns:
            Dict: A dictionary representing the signals log.
        """
        return self.signals_manager.signals_log

    def on_market_data(self, event: MarketDataEvent):
        """
        Handle new market data events.

        Parameters:
            event (MarketDataEvent): The market data event to handle.
        """

        print(event.data['AAPL'].__dict__)
        timestamp = event.timestamp
        data = event.data
        self.handle_market_data(data, timestamp)

    @abstractmethod
    def handle_market_data(self, data: Dict, timestamp: str):
        """
        Process market data and generate trading signals.

        Parameters:
            data (Dict): The market data.
            timestamp (str): The timestamp of the data.
        """
        pass

    def set_signal(self, trade_instructions, market_data, timestamp):
        """
        Create and queue signal events based on trading instructions.

        Parameters:
            trade_instructions: Trading instructions generated from the market data.
            market_data: Market data associated with the signals.
            timestamp: Timestamp for the signals.
        """
        print(trade_instructions)
        signal = Signal(timestamp, trade_instructions)
        
        self.signals_manager.add_signal(signal)
        self._event_queue.put(SignalEvent(signal, market_data))

    @abstractmethod
    def entry_signal(self, data: Dict):
        """
        Generate an entry signal based on market data.

        Parameters:
            data (Dict): Market data used for generating the entry signal.
        """
        pass

    @abstractmethod
    def exit_signal(self, data: Dict):
        """
        Generate an exit signal based on market data.

        Parameters:
            data (Dict): Market data used for generating the exit signal.
        """
        pass

    @abstractmethod
    def asset_allocation(self):
        """
        Define the asset allocation strategy.
        """
        pass

    def on_signal(self, capital: float, positions: dict, event: SignalEvent):
        """
        Handle a new signal event, processing it to generate order events.

        Parameters:
            capital (float): Current available capital.
            positions (dict): Current open positions.
            event (SignalEvent): The signal event to handle.
        """
        self.handle_signal(event.signal.trade_instructions, event.market_data, capital, positions)

    def set_order(self, contract, order, signal, market_data):
        """
        Create and queue an OrderEvent.

        Parameters:
            order_detail: Details of the order to be created and queued.
        """
        order_event = OrderEvent(contract, order, signal, market_data)
        self._event_queue.put(order_event)

    @abstractmethod
    def handle_signal(self, trade_instructions, market_data, current_capital: float, positions: dict) -> List:
        """
        Process signal event to generate order details.

        Parameters:
            trade_instructions: Instructions from the signal event.
            market_data: Market data associated with the signal.
            current_capital (float): Current available capital.
            positions (dict): Current positions held.

        Returns:
            List: A list containing order details for each trade instruction.
        """
        pass

    @abstractmethod
    def create_order_details(self):
        """
        Abstract method to create specific order details.
        """
        pass
